=======================================================================================================================================
							Links [ * * * ALL * * ]
=======================================================================================================================================

# - https://samir.pages.dev/posts/problems/
# - https://js-notes.vercel.app/software_engineering/ds_and_algos
# - https://www.techinterviewhandbook.org/algorithms/array/


'Coding interview study plan'  - https://www.techinterviewhandbook.org/coding-interview-study-plan/

=======================================================================================================================================
							[Array] Algorithms
=======================================================================================================================================

# - https://www.techinterviewhandbook.org/algorithms/array/
# - https://github.com/jwasham/coding-interview-university#arrays

=======================================================================================================================================
							[Strings] Algorithms
=======================================================================================================================================

# - https://www.techinterviewhandbook.org/algorithms/string/

# - https://leetcode.com/problems/minimum-window-substring/solutions/26808/Here-is-a-10-line-template-that-can-solve-most-'substring'-problems/

=======================================================================================================================================
							[Graph] Algorithms
=======================================================================================================================================

# - https://leetcode.com/discuss/post/655708/graph-for-beginners-problems-pattern-sam-06fb/

=======================================================================================================================================
							[Linked Lists] Algorithms
=======================================================================================================================================

# - https://github.com/jwasham/coding-interview-university#linked-lists

=======================================================================================================================================
							[Hash table] Algorithms
=======================================================================================================================================

# - https://www.techinterviewhandbook.org/algorithms/hash-table/

=======================================================================================================================================
							Templates
=======================================================================================================================================

/**============================================================================
Name        : Longest_Common_Prefix.cpp
Created on  : 10.03.2025
Author      : Andrei Tokmakov
Version     : 1.0
Copyright   : Your copyright notice
Description :
============================================================================**/

#include "../common.h"
#include "../StringAlgorithms.h"


namespace
{
    using namespace StringAlgorithms;


}

void StringAlgorithms::Longest_Common_Prefix()
{

}


=======================================================================================================================================
							Tests
=======================================================================================================================================

using TestData = std::vector< std::pair<std::vector<int>, int>>;
for (const auto& [values, expected]:  TestData{
	{ {} , 1 },
})
{
	const auto actual = TEST_FUNCTION(values);
	if (expected != actual) {
		std::cerr << std::boolalpha << expected << " != " << actual << std::endl;
	}
}
std::cout << "OK: All tests passed\n";

=======================================================================================================================================
							PLAN
=======================================================================================================================================

CountDistinctPairs_WithDifference_K ()
Numeric::MaxPairSumInArray();
Find_Pair_SumX_Sorted
Find_DifferentPairs_SumK


• Arrays:


  - 'Product of Array Except Self': https://leetcode.com/problems/product-of-array-except-self/description/
  - 'Daily Temperatures': https://leetcode.com/problems/daily-temperatures/description/
  - 'Sort Colors' : https://leetcode.com/problems/sort-colors/description/

	permutations
	88. Merge Sorted Array
    Numeric::Find_Repeating_And_Missing()


• two pointers
  - 'Palindromic Substrings':  https://leetcode.com/problems/palindromic-substrings/description/  [strings, two pointers]
  -	'Sort Colors' ; https://leetcode.com/problems/sort-colors/description/                        [arrays, two pointers]
  -	https://leetcode.com/problems/partition-labels/








• tree

	https://leetcode.com/problems/path-sum-ii/	

•  hash table 
	https://leetcode.com/problems/find-all-anagrams-in-a-string/
	https://leetcode.com/problems/permutation-in-string/
	https://leetcode.com/problems/single-number/ - решить за O(1) по памяти
    https://leetcode.com/problems/4sum/ 
    https://leetcode.com/problems/group-anagrams/ 

• sort 

	https://leetcode.com/problems/merge-intervals/ 

• Sliding window

  - 'Longest Substring Without Repeating Characters': https://leetcode.com/problems/longest-substring-without-repeating-characters/description/   <------- CHECK
  - 'Minimum Size Subarray Sum': https://leetcode.com/problems/minimum-size-subarray-sum/description/                                             <------- CHECK
  - 'Minimum Window Substring': https://leetcode.com/problems/minimum-window-substring/description/

	https://leetcode.com/problems/sliding-window-median/
	https://leetcode.com/problems/sliding-window-maximum/
	https://leetcode.com/problems/longest-repeating-character-replacement/ 

• iterator

	https://leetcode.com/problems/peeking-iterator/ 

• greedy problems 

	https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/ 
	https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/


• Trees:

	Print Tree
	Pre_Order_Walk
	Find_Node_WithSumX_2
	Find_Maximum_PathSum_BetweenNodes

• Graph

	https://leetcode.com/discuss/post/655708/graph-for-beginners-problems-pattern-sam-06fb/

• dfs/bfs 

    https://leetcode.com/problems/number-of-islands/
    https://leetcode.com/problems/remove-invalid-parentheses/

# [✔️ ☑️ ✅ ❌ ][Coding interview study plan] https://www.techinterviewhandbook.org/coding-interview-study-plan/


✅ Two Sum
✅ Valid Parentheses
✅ Best Time to Buy and Sell Stock
✅ Valid Palindrome
✅ Valid Anagram
✅ Balanced Binary Tree
✅ Linked List Cycle
✅ Merge Two Sorted List
 - Binary Search                                            <------- CHECK
 - Flood Fill
 - Lowest Common Ancestor of a Binary Search Tree           <------- CHECK
 - Invert Binary Tree                                       <------- CHECK


✅ Implement Queue using Stacks
 - First Bad Version
 - Ransom Note
 - Climbing Stairs
✅ Longest Palindrome
✅ Reverse Linked List
✅ Majority Element
 - Add Binary                                               <------- CHECK
 - Diameter of Binary Tree
 - Middle of the Linked List                                <------- CHECK
 - Maximum Depth of Binary Tree                             <------- CHECK
 - Contains Duplicate                             		      <------- CHECK

 - Min Stack                             					          <------- CHECK
+  Maximum Subarray
 - Insert Interval
 - 01 Matrix
 - K Closest Points to Origin
 - Longest Substring Without Repeating Characters           <------- CHECK
 - 3Sum    																						      <------- CHECK
 - Binary Tree Level Order Traversal                        <------- CHECK || Какой еще способ есть???
 - Clone Graph
 - Evaluate Reverse Polish Notation

 - Course Schedule
 - Implement Trie (Prefix Tree)
 - Coin Change                            					<------- CHECK
 - Product of Array Except Self         					<------- NEXT
 - Validate Binary Search Tree                              <------- CHECK
 - Number of Islands
 - Rotting Oranges
 - Search in Rotated Sorted Array

 - Combination Sum	
 - Permutations
 - Merge Intervals
 - Lowest Common Ancestor of a Binary Tree                  <------- CHECK
 - Time Based Key-Value Store
 - Accounts Merge
 - Sort Colors
 - Word Break

 - Partition Equal Subset Sum
 - String to Integer (atoi)                                 <------- CHECK
 - Spiral Matrix
 - Subsets
 - Binary Tree Right Side View
 - Longest Palindromic Substring                            <------- CHECK
 - Unique Paths	
 - Construct Binary Tree from Preorder and Inorder Traversal
 - Container With Most Water	                            <------- CHECK

 - Letter Combinations of a Phone Number	
 - Word Search	                                            <------- CHECK
 - Find All Anagrams in a String
 - Minimum Height Trees	
 - Task Scheduler
 - LRU Cache                              					<------- CHECK
 - Kth Smallest Element in a BST	                        <------- CHECK
 - Minimum Window Substring

 - Serialize and Deserialize Binary Tree
 - Trapping Rain Water	
 - Find Median from Data Stream
 - Word Ladder	
 - Basic Calculator	
 - Maximum Profit in Job Scheduling
 - Merge k Sorted Lists                                     <------- CHECK
 - Largest Rectangle in Histogram
	
=======================================================================================================================================
							Update README  |  -  [__NAME__](__LINK__)<br/>
=======================================================================================================================================

Trees:
  - Get_Tree_Min_Depth
  - Print_Left_View

Strings:
  - Is_Palindrome_Ignore_Invalid_Chars
  -	Longest_Common_Prefix

Two Pointers
  - Is_Palindrome_Ignore_Invalid_Chars

Array:
  - Longest_Subset_With_Positive_Bitwise_AND
  - Find_Pair_Sum_Equal_K
  - Kadane_Algorithm

=======================================================================================================================================
							Algoritms: Top Google Questions – Part 1
=======================================================================================================================================

[+] 1.   Two Sum      
[+] 3.   Longest Substring Without Repeating Characters
[+] 4.   Median of Two Sorted Arrays
[+] 26.  Remove Duplicates from Sorted Array
[+] 27.  Remove Element
[+] 19.  Remove Nth Node From End of List
[+] 41.  First Missing Positive
[+] 230. Kth Smallest Element in a BST
[+] 55.  Jump Game
[+] 242. Valid Anagram
[+] 231. Power of Two
[+] 169. Majority Element
[+] 237. Delete Node in a Linked List
[+] 83.  Remove Duplicates from Sorted List
[+] 23.  Merge k Sorted Lists
[+] 219. Contains Duplicate II
[+] 8.   String to Integer (atoi)
[+] 136. Single Number
[+] 137. Single Number II
[+] 66.  Plus One
[+] 11. Container With Most Water
[+] 121. Best Time to Buy and Sell Stock   [+ ]  
[+]  94. Binary Tree Inorder Traversal
[+] 5.   Longest Palindromic Substring
[+] 79.  Word Search
[+] 146. LRU Cache
[+] 110. Balanced Binary Tree
[+] 1047. Remove All Adjacent Duplicates In String
[+] 198. House Robber
[+]  69. Sqrt(x)
[+] 14. Longest Common Prefix

6. ZigZag Conversion
24. Swap Nodes in Pairs
33. Search in Rotated Sorted Array
35. Search Insert Position
38. Count and Say
46. Permutations
50. Pow(x, n)
51. N-Queens
53. Maximum Subarray
54. Spiral Matrix
59. Spiral Matrix II
60. Permutation Sequence
67. Add Binary
70. Climbing Stairs
72. Edit Distance
74. Search a 2D Matrix
75. Sort Colors
77. Combinations
78. Subsets
81. Search in Rotated Sorted Array II
84. Largest Rectangle in Histogram
88. Merge Sorted Array
96. Unique Binary Search Trees
101. Symmetric Tree
102. Binary Tree Level Order Traversal
103. Binary Tree Zigzag Level Order Traversal
105. Construct Binary Tree from Preorder and Inorder Traversal
109. Convert Sorted List to Binary Search Tree
114. Flatten Binary Tree to Linked List
118. Pascal's Triangle
119. Pascal's Triangle II
129. Sum Root to Leaf Numbers
130. Surrounded Regions
144. Binary Tree Preorder Traversal
145. Binary Tree Postorder Traversal
153. Find Minimum in Rotated Sorted Array
163. Missing Ranges
173. Binary Search Tree Iterator
174. Dungeon Game
200. Number of Islands
205. Isomorphic Strings
207. Course Schedule
208. Implement Trie (Prefix Tree)
221. Maximal Square
222. Count Complete Tree Nodes
226. Invert Binary Tree
246. Strobogrammatic Number

=======================================================================================================================================
				Google Algoritms | /home/andtokm/Documents/Books/Algorithms/Google Algoritms.pdf
=======================================================================================================================================

[+] 	594. Longest Harmonious Subsequence
[+] 	709. To Lower Case
[+] 	657. Robot Return to Origin


Backtracking

	47. Permutations II
	52. N-Queens II
	90. Subsets II
	1101. The Earliest Moment When Everyone Become Friends
	1319. Number of Operations to Make Network Connected

Binary Search
+  	69. Sqrt(x)
	275. H-Index II
	367. Valid Perfect Square
	441. Arranging Coins
	744. Find Smallest Letter Greater Than Target
	892. Surface Area of 3D Shapes
	976. Largest Perimeter Triangle
	1198. Find Smallest Common Element in All Rows

Array

+   1. Two Sum
	73. Set Matrix Zeroes
	167. Two Sum II - Input array is sorted
	170. Two Sum III - Data structure design
	463. Island Perimeter
	509. Fibonacci Number
	561. Array Partition I
	566. Reshape the Matrix
	624. Maximum Distance in Arrays
	653. Two Sum IV - Input is a BST
	654. Maximum Binary Tree
	623. Add One Row to Tree
	695. Max Area of Island
	760. Find Anagram Mappings
	766. Toeplitz Matrix
	811. Subdomain Visit Count
	832. Flipping an Image
	852. Peak Index in a Mountain Array
	867. Transpose Matrix
	905. Sort Array By Parity
	918. Maximum Sum Circular Subarray
	922. Sort Array By Parity II
	961. N-Repeated Element in Size 2N Array
	977. Squares of a Sorted Array994. Rotting Oranges
	1051. Height Checker
	1064. Fixed Point
	1085. Sum of Digits in the Minimum Number
	1086. High Five
	1099. Two Sum Less Than K
	1122. Relative Sort Array
	1133. Largest Unique Number
	1196. How Many Apples Can You Put into the Basket
	1200. Minimum Absolute Difference
	1207. Unique Number of Occurrences
	1213. Intersection of Three Sorted Arrays
	1217. Play with Chips
	1243. Array Transformation
	1252. Cells with Odd Values in a Matrix
	1266. Minimum Time Visiting All Points
	1299. Replace Elements with Greatest Element on Right Side
	1304. Find N Unique Integers Sum up to Zero
	1305. All Elements in Two Binary Search Trees
	1313. Decompress Run-Length Encoded List
	1337. The K Weakest Rows in a Matrix
	1338. Reduce Array Size to The Half
	1413. Minimum Value to Get Positive Step by Step Sum
	1423. Maximum Points You Can Obtain from Cards
	1425. Constrained Subset Sum
	1428. Leftmost Column with at Least a One
	1431. Kids With the Greatest Number of Candies
	1437. Check If All 1-s Are at Least Length K Places Away
	1442. Count Triplets That Can Form Two Arrays of Equal XOR
	1450. Number of Students Doing Homework at a Given Time
	1460. Make Two Arrays Equal by Reversing Sub-arrays
	1464. Maximum Product of Two Elements in an Array
	1465. Maximum Area of a Piece of Cake After Horizontal and Vertical Cuts````
	1470. Shuffle the Array
	1475. Final Prices With a Special Discount in a Shop
	1481. Least Number of Unique Integers after K Removals
	1491. Average Salary Excluding the Minimum and Maximum Salary

Tree

	104. Maximum Depth of Binary Tree
	111. Minimum Depth of Binary Tree
	144. Binary Tree Preorder Traversal
	199. Binary Tree Right Side View
	513. Find Bottom Left Tree Value
+	515. Find Largest Value in Each Tree Row
+	559. Maximum Depth of N-ary Tree
	563. Binary Tree Tilt
+	589. N-ary Tree Preorder Traversal
+	590. N-ary Tree Postorder Traversal
	617. Merge Two Binary Trees
	655. Print Binary Tree
	700. Search in a Binary Search Tree
	872. Leaf-Similar Trees
	897. Increasing Order Search Tree
	938. Range Sum of BST
	965. Univalued Binary Tree
	993. Cousins in Binary Tree
	1008. Construct Binary Search Tree from Preorder Traversal
	1022. Sum of Root To Leaf Binary Numbers
	1325. Delete Leaves With a Given Value
	1333. Filter Restaurants by Vegan-Friendly, Price and Distance
	1443. Minimum Time to Collect All Apples in a Tree
	1448. Count Good Nodes in Binary Tree
	1457. Pseudo-Palindromic Paths in a Binary Tree
	1469. Find All The Lonely Nodes
	1490. Clone N-ary Tree

Math

+	2. Add Two Numbers --> Linled List
+	7. Reverse Integer  
+	9. Palindrome Number
+	136. Single Number
	172. Factorial Trailing Zeroes
	202. Happy Number
+	217. Contains Duplicate
	258. Add Digits
	263. Ugly Number
	476. Number Complement
	645. Set Mismatch
	728. Self Dividing Numbers
	869. Reordered Power of 2
	883. Projection Area of 3D Shapes
	908. Smallest Range I
	970. Powerful Integers
	1103. Distribute Candies to People
	1134. Armstrong Number
	1185. Day of the Week
	1227. Airplane Seat Assignment Probability
	1228. Missing Number In Arithmetic Progression
	1232. Check If It Is a Straight Line
	1237. Find Positive Integer Solution for a Given Equation
	1281. Subtract the Product and Sum of Digits of an Integer
	1295. Find Numbers with Even Number of Digits
	1323. Maximum 69 Number

String

[+]	20. Valid Parentheses
	58. Length of Last Word
[+]	71. Simplify Path
[+]	344. Reverse String
[+]	383. Ransom Note
[+]	500. Keyboard Row
	557. Reverse Words in a String III
	599. Minimum Index Sum of Two Lists
	771. Jewels and Stones
	796. Rotate String
	804. Unique Morse Code Words
	806. Number of Lines To Write String
	821. Shortest Distance to a Character
	893. Groups of Special-Equivalent Strings
	929. Unique Email Addresses
	953. Verifying an Alien Dictionary
	1002. Find Common Characters
	1021. Remove Outermost Parentheses
	1044. Longest Duplicate Substring
	1047. Remove All Adjacent Duplicates In String
	1078. Occurrences After Bigram
	1108. Defanging an IP Address
	1119. Remove Vowels from a String
	1160. Find Words That Can Be Formed by Characters
[+]	1165. Single-Row Keyboard
	1180. Count Substrings with Only One Distinct Letter
	1221. Split a String in Balanced Strings
	1236. Web Crawler
	1309. Decrypt String from Alphabet to Integer Mapping
	1324. Print Words Vertically
	1332. Remove Palindromic Subsequences
	1427. Perform String Shifts
	1432. Max Difference You Can Get From Changing an Integer
	1433. Check If a String Can Break Another String
[+]	1436. Destination City
[+]	1446. Consecutive Characters
	1451. Rearrange Words in a Sentence
	1455. Check If a Word Occurs As a Prefix of Any Word in a Sentence
	1456. Maximum Number of Vowels in a Substring of Given Length
	1487. Making File Names Unique

Depth-First Search & Breadth-First Search

	200. Number of Islands695. Max Area of Island
	886. Possible Bipartition
	1222. Queens That Can Attack the King
	1489. Find Critical and Pseudo-Critical Edges in Minimum Spanning Tree

Linked List

+	21.   Merge Two Sorted Lists
	61.   Rotate List
+	876.  Middle of the Linked List
	1290. Convert Binary Number in a Linked List to Integer
	1474. Delete N Nodes After M Nodes of a Linked List

Bit Manipulation

	338. Counting Bits
	342. Power of Four
	461. Hamming Distance
	476. Number Complement
	1486. XOR Operation in an Array

Design Data Structure
	359. Logger Rate Limiter
	901. Online Stock Span
	1429. First Unique Number
	1472. Design Browser History
	1476. Subrectangle Queries


======================================================================================================================================
								Patterns
======================================================================================================================================

Islands (Matrix Traversal) 

- Used for traversing 2D grids or matrices efficiently. 
- Commonly applies DFS or BFS for searching connected components. 
- Helps solve problems related to islands, clusters, or paths. 

Two Pointers 

- Uses two pointers to traverse data, often from opposite directions. 
- Helps optimize problems involving pairs, sorting, or merging. 
- Reduces time complexity compared to brute force. 

Fast & Slow Pointers:

- Also known as the Hare & Tortoise Algorithm. 
- Uses two pointers moving at different speeds to detect cycles. 
- Commonly used for linked lists and circular arrays.

Merge Intervals:

- Deals with overlapping intervals. 
- Used for scheduling, reservations, and range merging. 
- Sorting intervals first usually helps in solving these problems.

Breadth-First Search (BFS):

- Traverses trees or graphs level by level. 
- Used for finding shortest paths or exploring neighbors first. 
- Implemented using a queue. 

Depth-First Search (DFS):

- Traverses deep into trees or graphs before backtracking. 
- Used for recursion-based traversal and path-related problems. 
- Implemented using stack or recursion.

Subsets:

- Used for problems requiring combinations or permutations. 
- Applies backtracking or BFS to generate all possible subsets. 
- Useful for problems involving decision trees. 



====================================================================================================================================================



int solution(std::vector<int> &X, std::vector<int> &Y)
{
    std::unordered_map<double, int> fractionsCounter;
    int maxFractionCount = 0;
    for (int idx = 0, size = X.size(); idx < size; ++idx )
    {
        const double fraction = static_cast<double>(X[idx]) / static_cast<double> (Y[idx]);
        ++fractionsCounter[fraction];
        maxFractionCount = std::max(maxFractionCount, fractionsCounter[fraction]);
    }

    return maxFractionCount;
}











void split_to(const std::string &str,
              std::vector<std::string> &parts)
{
    parts.clear();
    size_t pos = 0, prev = 0;
    while ((pos = str.find(" ", prev)) != std::string::npos) {
        parts.emplace_back(str.data() + prev, pos - prev);
        prev = pos + 1;
    }
    parts.emplace_back(str.data() + prev, str.length() - prev);
}

int solution(std::string& input)
{
    constexpr int valMax { 524288 };
    std::vector<std::string> tokens;
    split_to(input, tokens);

    std::vector<int> stack;
    stack.reserve(tokens.size());
    for (const std::string& str: tokens)
    {
        if ("POP" == str)
        {
            if (stack.empty())
                return -1;
            stack.pop_back();
        }
        else if ("DUP" == str)
        {
            if (stack.empty())
                return -1;
            stack.push_back(stack.back());
        }
        else if ("+" == str)
        {
            if (stack.size() < 2)
                return -1;
            const int sum = stack[stack.size() - 1] + stack[stack.size() - 2];
            stack[stack.size() - 2] = sum;
            stack.pop_back();
        }
        else if ("-" == str)
        {
            if (stack.size() < 2)
                return -1;
            const int dif = stack[stack.size() - 1] - stack[stack.size() - 2];
            stack[stack.size() - 2] = dif;
            stack.pop_back();
        }
        else
        {
            const int v = atoi(str.data());
            if (v > valMax || 0 > v) {
                return -1;
            }
            stack.push_back(v);
        }
        std::cout << stack << std::endl;
    }

    if (stack.empty()) {
        std::cerr << "Stack is empty" << std::endl;
        return 0;
    }
    return stack.back();
}*/

{
    // std::string input {"4 5 6 - 7 +" };
    // std::string input {"13 DUP 4 POP 5 DUP + DUP + -" }; // 7
    // std::string input {"3 DUP 5 - -" };
    // std::string input {"5 6 + -" };
    // std::string input {"1048575 DUP +" }; // -1
    std::string input {"-1 -2" };
    std::cout << solution(input) << std::endl;
    //std::cout << atoi("-1") << std::endl;
}

#endif